// schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Question {
  filename     String   @id
  name         String?
  description  String?
  tags         Json?
  status       String?
  timed        Boolean  @default(false)
  createdAt    DateTime @default(now())
  editedAt     DateTime @updatedAt
  deck         Json
  slides       Slide[]  @relation("QuestionSlides")
}

model Slide {
  id               Int      @id @default(autoincrement())
  questionFilename String   @map("question_filename")
  index            Int
  type             String
  start            Float
  end              Float
  question  Question   @relation("QuestionSlides", fields: [questionFilename], references: [filename])
  items     SlideItem[]
}

model SlideItem {
  id          Int     @id @default(autoincrement())
  slideId     Int
  index       Int
  name        String
  showAt      Float?
  textContent String?
  numValue    Float?
  label       String?
  imageUrl    String?
  colorHex    String?
  typeHint    String?
  extraJson   Json?
  slide Slide @relation(fields: [slideId], references: [id])
}

/////////////////////////////////
model Comments {
  id          String   @id @default(cuid())
  created_at  DateTime @default(now())

  content_id  String
  user_id     String
  text        String   // the comment text

  @@index([content_id, created_at], name: "idx_comment_content_time")
  @@index([user_id, content_id], name: "idx_comment_user_content")
}


///////////

model Likes {
  id            String   @id @default(cuid())
  created_at    DateTime @default(now())

  content_id    String
  user_id       String

@@unique([user_id, content_id], name: "uniq_user_content_reaction")
@@index([user_id, content_id], name: "idx_user_content")
}

//////////////
enum StudentMessageCategory {
  general
}

model StudentMessage {
  id          String                   @id @default(cuid())
  user_id     String
  category    StudentMessageCategory   @default(general)
  message     String
  read        Boolean                  @default(false)
  created_at  DateTime                 @default(now())
  @@index([user_id, read, created_at])
  @@index([user_id, created_at])
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  password_hash String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  @@index([email])
}
