import { c as create_ssr_component, b as subscribe, o as onDestroy, v as validate_component } from './ssr-CO7PFcwR.js';
import { p as page } from './stores-CMjZ2Be-.js';
import { L as Like, C as Comment } from './Comment-j8Qbdo2-.js';
import 'howler';
import './ssr2-6RDSickK.js';
import './state.svelte-BCeRBbkS.js';
import 'katex';

const css = {
  code: ".center.svelte-1ihtpwz{display:flex;align-items:center;justify-content:center;height:100vh;color:#666}.error.svelte-1ihtpwz{color:#b00020}",
  map: `{"version":3,"file":"+page.svelte","sources":["+page.svelte"],"sourcesContent":["<script>\\n  import { onMount, onDestroy } from 'svelte';\\n  import { page } from '$app/stores';\\n  import '$lib/styles/tables.css';\\n\\n  import Like from '../../lib/Like.svelte';\\n  import Comment from '../../lib/Comment.svelte';\\n  import { getDeck } from '$lib/services/deckService.js';\\n  import { createSoundPlayer, detectSoundUrl } from '$lib/services/soundServices.js';\\n\\n  import { NavBar, TaleemSlides } from '$lib/taleemPlayer';\\n\\n  // import TaleemPlayer from '$lib/taleemPlayer/Player.svelte';\\n  import { clampTime, findSlideIndex, getDeckEnd } from '$lib/taleemPlayer/player-utility.js';\\n\\n  // ---- state (single source of truth) ----\\n  let deck = null;\\n  let background = null;\\n\\n  let soundUrl = null;\\n  let player = null;\\n\\n  let currentTime = 0;\\n  let currentSlideIndex = 0;\\n  let filename = \\"\\";\\n  let deckEnd = 0;\\n\\n  let loading = true;\\n  let errorMsg = null;\\n\\n  async function init() {\\n    loading = true;\\n    errorMsg = null;\\n\\n    const params = new URLSearchParams($page.url.search);\\n    filename = params.get('filename');\\n    if (!filename) {\\n      errorMsg = 'Filename parameter is required.';\\n      loading = false;\\n      return;\\n    }\\n\\n    try {\\n      // 1) Load deck\\n      const fullDeck = await getDeck(filename); // { version, deck, background? }\\n      deck = fullDeck.deck;\\n      background = fullDeck.background ?? null;\\n\\n      // 2) Time boundaries\\n      deckEnd = getDeckEnd(deck);\\n      currentSlideIndex = findSlideIndex(deck, 0); // ensure first slide renders immediately\\n\\n      // 3) Auto-detect audio once (client-side), no logging on 404\\n      soundUrl = await detectSoundUrl(filename, fetch); // returns '/sounds/<filename>.opus' or null\\n\\n      // 4) Create timing source (Howler if url, Timer otherwise)\\n      player = createSoundPlayer(soundUrl);\\n\\n      // 5) Ticks → update app state\\n      player.onTick((t) => {\\n        currentTime = clampTime(deck, t);\\n        currentSlideIndex = findSlideIndex(deck, currentTime);\\n\\n        if (currentTime >= deckEnd) {\\n          currentTime = deckEnd;\\n          player.pause();\\n        }\\n      });\\n    } catch (err) {\\n      errorMsg = err?.message || 'Failed to load deck.';\\n    } finally {\\n      loading = false;\\n    }\\n  }\\n\\n  // Controls\\n  function play()  { player?.play?.(); }\\n  function pause() { player?.pause?.(); }\\n  function seek(t) {\\n    if (!player) return;\\n    player.seek(t);\\n    // immediately reflect in UI (works when paused)\\n    currentTime = clampTime(deck, t);\\n    currentSlideIndex = findSlideIndex(deck, currentTime);\\n  }\\n  function stop() {\\n    if (!player) return;\\n    player.pause();\\n    player.seek(0);\\n    // reflect immediately\\n    currentTime = 0;\\n    currentSlideIndex = findSlideIndex(deck, 0);\\n  }\\n\\n  onMount(init);\\n  onDestroy(() => { player?.destroy?.(); });\\n<\/script>\\n\\n{#if loading}\\n  <div class=\\"center\\">Loading…</div>\\n{:else if errorMsg}\\n  <div class=\\"center error\\">{errorMsg}</div>\\n{:else}\\n  <!-- <SveltePlayer\\n    {deck}\\n    {background}\\n    {currentTime}\\n    {currentSlideIndex}\\n    {deckEnd}\\n    {soundUrl}\\n    onPlay={play}\\n    onPause={pause}\\n    onStop={stop}\\n    onSeek={seek}\\n  /> -->\\n    <TaleemSlides\\n    {deck}\\n    {currentTime}\\n  />\\n  <NavBar \\n  {currentTime}\\n  {currentSlideIndex}\\n  {deckEnd}\\n  {soundUrl}\\n  onPlay={play}\\n  onPause={pause}\\n  onStop={stop}\\n  onSeek={seek}\\n  />\\n{/if}\\n\\n\\n<div class=\\"bg-[#594112]\\">\\n<Like \\ncontentId ={filename}\\n/>\\n\\n<hr/>\\n\\n<Comment \\ncontentId ={filename}\\n/>\\n</div>\\n\\n<style>\\n  .center { display:flex; align-items:center; justify-content:center; height:100vh; color:#666; }\\n  .error { color:#b00020; }\\n</style>"],"names":[],"mappings":"AAiJE,sBAAQ,CAAE,QAAQ,IAAI,CAAE,YAAY,MAAM,CAAE,gBAAgB,MAAM,CAAE,OAAO,KAAK,CAAE,MAAM,IAAM,CAC9F,qBAAO,CAAE,MAAM,OAAS"}`
};
const Page = create_ssr_component(($$result, $$props, $$bindings, slots) => {
  let $$unsubscribe_page;
  $$unsubscribe_page = subscribe(page, (value) => value);
  let filename = "";
  onDestroy(() => {
  });
  $$result.css.add(css);
  $$unsubscribe_page();
  return `${`<div class="center svelte-1ihtpwz" data-svelte-h="svelte-y7ce8">Loading…</div>`} <div class="bg-[#594112]">${validate_component(Like, "Like").$$render($$result, { contentId: filename }, {}, {})} <hr> ${validate_component(Comment, "Comment").$$render($$result, { contentId: filename }, {}, {})} </div>`;
});

export { Page as default };
//# sourceMappingURL=_page.svelte-CXAhnj46.js.map
