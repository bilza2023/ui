{"version":3,"file":"questionServices-CHZd5-Cj.js","sources":["../../../.svelte-kit/adapter-node/chunks/questionServices.js"],"sourcesContent":["import { p as prisma } from \"./prisma.js\";\nconst ALLOWED_TYPES = [\"deck\", \"note\"];\nfunction _assertTypeAndPayload({ type, deck, note }) {\n  if (!ALLOWED_TYPES.includes(type)) {\n    throw new Error(`Invalid type \"${type}\" (allowed: ${ALLOWED_TYPES.join(\", \")})`);\n  }\n  if (type === \"deck\" && !deck) throw new Error('Deck payload missing for type=\"deck\"');\n  if (type === \"note\" && !note) throw new Error('Note payload missing for type=\"note\"');\n}\nfunction _normalizeCommonFields(input = {}) {\n  const {\n    filename,\n    tcode = null,\n    chapter = null,\n    exercise = null,\n    type,\n    // required\n    name = null,\n    description = null,\n    tags = [],\n    status = null,\n    sortOrder = null,\n    timed = false,\n    deck = null,\n    note = null\n  } = input;\n  if (!filename) throw new Error(\"filename is required\");\n  _assertTypeAndPayload({ type, deck, note });\n  return {\n    filename,\n    tcode,\n    chapter,\n    exercise,\n    type,\n    name,\n    description,\n    tags: Array.isArray(tags) ? tags : [],\n    status,\n    sortOrder: typeof sortOrder === \"number\" ? sortOrder : null,\n    timed: Boolean(timed),\n    deck: type === \"deck\" ? deck : null,\n    note: type === \"note\" ? note : null\n  };\n}\nasync function exists(filename) {\n  if (!filename) throw new Error(\"exists: filename required\");\n  return prisma.question.findUnique({ where: { filename } });\n}\nasync function getQuestionByFilename(filename, opts = {}) {\n  if (!filename) throw new Error(\"getQuestionByFilename: filename required\");\n  const { selectPayload = true } = opts;\n  const select = {\n    filename: true,\n    type: true,\n    name: true,\n    description: true,\n    tags: true,\n    status: true,\n    sortOrder: true,\n    timed: true,\n    tcode: true,\n    chapter: true,\n    exercise: true,\n    createdAt: true,\n    editedAt: true\n  };\n  if (selectPayload) {\n    select.deck = true;\n    select.note = true;\n  }\n  return prisma.question.findUnique({ where: { filename }, select });\n}\nasync function createQuestion(input) {\n  const data = _normalizeCommonFields(input);\n  return prisma.question.create({ data });\n}\nasync function updateDeckJson(filename, deckJson) {\n  if (!filename) throw new Error(\"updateDeckJson: filename required\");\n  if (!deckJson) throw new Error(\"updateDeckJson: deck JSON required\");\n  return prisma.question.update({\n    where: { filename },\n    data: { deck: deckJson, editedAt: /* @__PURE__ */ new Date(), type: \"deck\", note: null }\n  });\n}\nasync function deleteByFilename(filename) {\n  if (!filename) throw new Error(\"deleteByFilename: filename required\");\n  return prisma.question.delete({ where: { filename } });\n}\nexport {\n  createQuestion as c,\n  deleteByFilename as d,\n  exists as e,\n  getQuestionByFilename as g,\n  updateDeckJson as u\n};\n"],"names":[],"mappings":"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"}